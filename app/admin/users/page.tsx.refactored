'use client';

import { useRouter } from 'next/navigation';
import { 
  Edit, 
  Trash2, 
  Eye,
  EyeOff,
  Shield,
  User as UserIcon
} from 'lucide-react';
import { format } from 'date-fns';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import AdminTable from '@/components/admin/generics/AdminTable';
import { User } from '@/types/app';

export default function UsersPage() {
  const router = useRouter();

  // Fonction pour récupérer les utilisateurs
  const fetchUsers = async (): Promise<User[]> => {
    const response = await fetch('/api/users');
    if (!response.ok) {
      throw new Error(`Erreur: ${response.status}`);
    }
    return await response.json();
  };

  // Définition des colonnes du tableau
  const columns = [
    {
      header: 'Utilisateur',
      accessorKey: 'name',
      enableSorting: true,
      renderCell: (user: User) => (
        <div className="flex items-center">
          <Avatar className="h-10 w-10">
            <AvatarImage src={user.image || ''} alt={user.name || ''} />
            <AvatarFallback>{user.name?.substring(0, 2) || 'U'}</AvatarFallback>
          </Avatar>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{user.name}</div>
            <div className="text-sm text-gray-500">{user.email}</div>
          </div>
        </div>
      )
    },
    {
      header: 'Rôle',
      accessorKey: 'role',
      renderCell: (user: User) => (
        <div className="flex items-center">
          <span className={`px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
            user.role === 'ADMIN' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'
          }`}>
            {user.role === 'ADMIN' ? 'Admin' : 'Utilisateur'}
          </span>
        </div>
      )
    },
    {
      header: 'Inscrit le',
      accessorKey: 'createdAt',
      enableSorting: true,
      renderCell: (user: User) => (
        <div className="text-sm text-gray-500">
          {format(new Date(user.createdAt), 'dd/MM/yyyy')}
        </div>
      )
    },
    {
      header: 'Statut',
      accessorKey: 'isActive',
      renderCell: (user: User) => (
        <span className={`px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
          user.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {user.isActive ? 'Actif' : 'Inactif'}
        </span>
      )
    },
    {
      header: 'Dernière connexion',
      accessorKey: 'lastLogin',
      enableSorting: true,
      renderCell: (user: User) => (
        <div className="text-sm text-gray-500">
          {user.lastLogin ? format(new Date(user.lastLogin), 'dd/MM/yyyy HH:mm') : 'Jamais'}
        </div>
      )
    }
  ];

  // Définition des actions
  const actions = [
    {
      label: 'Voir profil',
      icon: <Eye className="w-4 h-4 mr-1" />,
      onClick: (user: User) => router.push(`/profile/${user.id}`),
      variant: 'outline' as const
    },
    {
      label: 'Éditer',
      icon: <Edit className="w-4 h-4 mr-1" />,
      onClick: (user: User) => router.push(`/admin/users/${user.id}/edit`),
      variant: 'outline' as const
    },
    {
      label: 'Promouvoir Admin',
      icon: <Shield className="w-4 h-4 mr-1" />,
      onClick: async (user: User) => {
        if (confirm(`Voulez-vous promouvoir ${user.name} au rang d'administrateur ?`)) {
          await fetch(`/api/users/${user.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ role: 'ADMIN' })
          });
          window.location.reload();
        }
      },
      variant: 'outline' as const,
      condition: (user: User) => user.role !== 'ADMIN' && user.isActive
    },
    {
      label: 'Désactiver',
      icon: <EyeOff className="w-4 h-4 mr-1" />,
      onClick: async (user: User) => {
        if (confirm(`Voulez-vous désactiver le compte de ${user.name} ?`)) {
          await fetch(`/api/users/${user.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isActive: false })
          });
          window.location.reload();
        }
      },
      variant: 'outline' as const,
      condition: (user: User) => user.isActive
    },
    {
      label: 'Activer',
      icon: <Eye className="w-4 h-4 mr-1" />,
      onClick: async (user: User) => {
        if (confirm(`Voulez-vous réactiver le compte de ${user.name} ?`)) {
          await fetch(`/api/users/${user.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isActive: true })
          });
          window.location.reload();
        }
      },
      variant: 'outline' as const,
      condition: (user: User) => !user.isActive
    },
    {
      label: 'Supprimer',
      icon: <Trash2 className="w-4 h-4 mr-1" />,
      onClick: async (user: User) => {
        if (confirm(`Êtes-vous sûr de vouloir supprimer définitivement le compte de ${user.name} ? Cette action est irréversible.`)) {
          await fetch(`/api/users/${user.id}`, { method: 'DELETE' });
          window.location.reload();
        }
      },
      variant: 'destructive' as const
    }
  ];

  // Statistiques
  const createStatCards = (users: User[]) => [
    {
      title: "Nombre d'utilisateurs",
      value: users.length,
      color: 'blue'
    },
    {
      title: "Administrateurs",
      value: users.filter(u => u.role === 'ADMIN').length,
      color: 'purple'
    },
    {
      title: "Utilisateurs actifs",
      value: users.filter(u => u.isActive).length,
      color: 'green'
    },
    {
      title: "Utilisateurs inactifs",
      value: users.filter(u => !u.isActive).length,
      color: 'gray'
    }
  ];

  return (
    <AdminTable<User>
      title="Tous les utilisateurs"
      icon={<UserIcon className="mr-2 h-6 w-6 text-primary" />}
      description="Gérez les utilisateurs de la plateforme"
      fetchItems={fetchUsers}
      columns={columns}
      actions={actions}
      searchFields={['name', 'email']}
      statCards={createStatCards}
      itemsPerPage={20}
    />
  );
} 