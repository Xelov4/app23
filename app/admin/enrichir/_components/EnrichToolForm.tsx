"use client";

import React, { useState, useEffect } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { Tool, Category, Tag, UseCase } from "@prisma/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Separator } from "@/components/ui/separator";
import { toast } from "react-hot-toast";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Spinner } from "@/components/ui/spinner";

// Type personnalis√© pour l'outil avec relations
type ToolWithRelations = Tool & {
  CategoriesOnTools: {
    categoryId: string;
    Category: Category;
  }[];
  TagsOnTools: {
    tagId: string;
    Tag: Tag;
  }[];
  UseCasesOnTools: {
    useCaseId: string;
    UseCase: UseCase;
  }[];
};

interface EnrichToolFormProps {
  tool: ToolWithRelations;
  categories: Category[];
  tags: Tag[];
  useCases: UseCase[];
  selectedCategoryIds: string[];
  selectedTagIds: string[];
  selectedUseCaseIds: string[];
}

// Cl√© API Gemini (id√©alement √† stocker comme variable d'environnement)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyB5Jku7K8FwTM0LcC3Iihfo4btAJ6IgCcA";

export default function EnrichToolForm({
  tool,
  categories,
  tags,
  useCases,
  selectedCategoryIds,
  selectedTagIds,
  selectedUseCaseIds,
}: EnrichToolFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isCrawling, setIsCrawling] = useState(false);
  const [crawlStatus, setCrawlStatus] = useState("");
  const [crawlContent, setCrawlContent] = useState("");
  const [isEnriching, setIsEnriching] = useState(false);
  const [processLogs, setProcessLogs] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState("form");
  const logsEndRef = React.useRef<HTMLDivElement>(null);

  // √âtat du formulaire
  const [formData, setFormData] = useState({
    name: tool.name,
    description: tool.description,
    pricingType: tool.pricingType,
    pricingDetails: tool.pricingDetails || "",
    features: tool.features,
    websiteUrl: tool.websiteUrl,
    logoUrl: tool.logoUrl || "",
    twitterUrl: tool.twitterUrl || "",
    instagramUrl: tool.instagramUrl || "",
    facebookUrl: tool.facebookUrl || "",
    linkedinUrl: tool.linkedinUrl || "",
    githubUrl: tool.githubUrl || "",
    selectedCategories: selectedCategoryIds,
    selectedTags: selectedTagIds,
    selectedUseCases: selectedUseCaseIds,
  });

  // Fonction pour ajouter un log au processus
  const addProcessLog = (message: string) => {
    setProcessLogs(prevLogs => [...prevLogs, `[${new Date().toLocaleTimeString()}] ${message}`]);
    
    // Faire d√©filer automatiquement vers le bas pour voir les nouveaux logs
    setTimeout(() => {
      if (logsEndRef.current) {
        logsEndRef.current.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  };

  // G√©rer les changements dans le formulaire
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // G√©rer les changements de checkbox pour les cat√©gories
  const handleCategoryChange = (categoryId: string, checked: boolean) => {
    setFormData((prev) => {
      if (checked) {
        return {
          ...prev,
          selectedCategories: [...prev.selectedCategories, categoryId],
        };
      } else {
        return {
          ...prev,
          selectedCategories: prev.selectedCategories.filter((id) => id !== categoryId),
        };
      }
    });
  };

  // G√©rer les changements de checkbox pour les tags
  const handleTagChange = (tagId: string, checked: boolean) => {
    setFormData((prev) => {
      if (checked) {
        return {
          ...prev,
          selectedTags: [...prev.selectedTags, tagId],
        };
      } else {
        return {
          ...prev,
          selectedTags: prev.selectedTags.filter((id) => id !== tagId),
        };
      }
    });
  };

  // G√©rer les changements de checkbox pour les cas d'usage
  const handleUseCaseChange = (useCaseId: string, checked: boolean) => {
    setFormData((prev) => {
      if (checked) {
        return {
          ...prev,
          selectedUseCases: [...prev.selectedUseCases, useCaseId],
        };
      } else {
        return {
          ...prev,
          selectedUseCases: prev.selectedUseCases.filter((id) => id !== useCaseId),
        };
      }
    });
  };

  // Crawler le site web de l'outil
  const handleCrawlWebsite = async () => {
    if (!formData.websiteUrl) {
      toast.error("L'URL du site web est requise pour le crawling");
      return;
    }

    try {
      setIsCrawling(true);
      setCrawlStatus("D√©marrage du crawler...");
      setProcessLogs([]);
      addProcessLog("D√©marrage du crawling...");
      setActiveTab("logs");

      const response = await fetch("/api/admin/crawl", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          url: formData.websiteUrl,
          depth: 2,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur lors du crawling: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.error === 'DNS_ERROR') {
        setCrawlStatus("Erreur : Le domaine n'est pas r√©solvable");
        addProcessLog("‚ùå Erreur : Le domaine n'est pas r√©solvable");
        toast.error("Le domaine n'est pas r√©solvable. V√©rifiez l'URL et r√©essayez.");
        return;
      }

      if (data.error === 'CRAWL_ERROR') {
        setCrawlStatus("Erreur lors du crawling : " + data.message);
        addProcessLog(`‚ùå Erreur lors du crawling : ${data.message}`);
        toast.error("√âchec du crawling. V√©rifiez l'URL et r√©essayez.");
        return;
      }
      
      setCrawlContent(data.content);
      addProcessLog(`‚úÖ Crawling termin√© : ${data.content.length} caract√®res r√©cup√©r√©s`);
      
      // Analyser les d√©tails du processus dans le contenu (les premi√®res lignes)
      if (data.content) {
        const contentLines = data.content.split('\n');
        let processSummaryLines = [];
        
        // Extraire les premi√®res lignes qui contiennent les d√©tails du processus
        for (let i = 0; i < Math.min(50, contentLines.length); i++) {
          const line = contentLines[i].trim();
          if (line.startsWith('[Profondeur') || line.includes('URLs visit√©es') || line.includes('liens sociaux')) {
            processSummaryLines.push(line);
            addProcessLog(line);
          }
        }
      }
      
      // Mettre √† jour automatiquement les liens des r√©seaux sociaux si trouv√©s
      if (data.externalLinks && Array.isArray(data.externalLinks)) {
        let updatedForm = { ...formData };
        let linksFound = 0;
        
        data.externalLinks.forEach(link => {
          try {
            const url = new URL(link);
            const hostname = url.hostname.toLowerCase();
            
            if (hostname.includes('twitter.com') || hostname.includes('x.com')) {
              updatedForm.twitterUrl = link;
              addProcessLog(`‚úÖ Lien Twitter trouv√© : ${link}`);
              linksFound++;
            } else if (hostname.includes('facebook.com') || hostname.includes('fb.com')) {
              updatedForm.facebookUrl = link;
              addProcessLog(`‚úÖ Lien Facebook trouv√© : ${link}`);
              linksFound++;
            } else if (hostname.includes('instagram.com')) {
              updatedForm.instagramUrl = link;
              addProcessLog(`‚úÖ Lien Instagram trouv√© : ${link}`);
              linksFound++;
            } else if (hostname.includes('linkedin.com')) {
              updatedForm.linkedinUrl = link;
              addProcessLog(`‚úÖ Lien LinkedIn trouv√© : ${link}`);
              linksFound++;
            } else if (hostname.includes('github.com')) {
              updatedForm.githubUrl = link;
              addProcessLog(`‚úÖ Lien GitHub trouv√© : ${link}`);
              linksFound++;
            }
          } catch (error) {
            // Ignorer les URLs invalides
          }
        });
        
        if (linksFound > 0) {
          setFormData(updatedForm);
          setCrawlStatus(`Crawling termin√© : ${data.content.length} caract√®res r√©cup√©r√©s, ${linksFound} liens sociaux d√©tect√©s et mis √† jour`);
          toast.success(`${linksFound} liens sociaux ont √©t√© mis √† jour automatiquement`);
        } else {
          setCrawlStatus(`Crawling termin√© : ${data.content.length} caract√®res r√©cup√©r√©s`);
        }
      } else {
        setCrawlStatus(`Crawling termin√© : ${data.content.length} caract√®res r√©cup√©r√©s`);
      }
      
      // Lancer automatiquement l'enrichissement apr√®s le crawl
      if (data.content) {
        addProcessLog("ü§ñ D√©marrage de l'analyse avec Gemini AI...");
        await handleEnrichWithAI(data.content, data.externalLinks || []);
      }
    } catch (error) {
      console.error("Erreur lors du crawling:", error);
      setCrawlStatus("√âchec du crawling : " + (error as Error).message);
      addProcessLog(`‚ùå √âchec du crawling : ${(error as Error).message}`);
      toast.error("√âchec du crawling");
    } finally {
      setIsCrawling(false);
    }
  };

  // Enrichir l'outil avec Gemini AI
  const handleEnrichWithAI = async (content: string, externalLinks: string[] = []) => {
    try {
      setIsEnriching(true);
      setCrawlStatus("Analyse en cours avec Gemini AI...");
      addProcessLog("üìù Pr√©paration des donn√©es pour l'analyse IA...");

      // Pr√©paration des donn√©es de cat√©gories pour l'IA
      const selectedCategoriesInfo = categories
        .filter(cat => formData.selectedCategories.includes(cat.id))
        .map(cat => cat.name);
      
      const allCategoriesNames = categories.map(cat => cat.name);
      addProcessLog(`üìã Cat√©gories actuelles : ${selectedCategoriesInfo.length > 0 ? selectedCategoriesInfo.join(', ') : 'Aucune'}`);
      
      // Pr√©paration des donn√©es de tags pour l'IA
      const selectedTagsInfo = tags
        .filter(tag => formData.selectedTags.includes(tag.id))
        .map(tag => tag.name);
      
      const allTagsNames = tags.map(tag => tag.name);
      addProcessLog(`üè∑Ô∏è Tags actuels : ${selectedTagsInfo.length > 0 ? selectedTagsInfo.join(', ') : 'Aucun'}`);
      
      // Pr√©paration des donn√©es de cas d'usage pour l'IA
      const selectedUseCasesInfo = useCases
        .filter(uc => formData.selectedUseCases.includes(uc.id))
        .map(uc => uc.name);
      
      const allUseCasesNames = useCases.map(uc => uc.name);
      addProcessLog(`üìã Cas d'usage actuels : ${selectedUseCasesInfo.length > 0 ? selectedUseCasesInfo.join(', ') : 'Aucun'}`);
      
      // Formatage des liens externes pour le prompt
      const socialLinksSection = externalLinks.length > 0 
        ? `\nLiens externes trouv√©s pendant le crawling (probablement des r√©seaux sociaux):\n${externalLinks.join('\n')}`
        : '';

      addProcessLog(`üîç Envoi de la requ√™te √† Gemini AI (${Math.round(content.length / 1000)}K caract√®res)...`);

      const prompt = `
Tu es un assistant sp√©cialis√© dans l'analyse d'outils d'IA pour la vid√©o. Je vais te fournir le contenu texte d'un site web d'un outil IA qui aide √† cr√©er, √©diter ou manipuler des vid√©os.

Ta mission est d'analyser ce contenu et d'extraire des informations structur√©es pour compl√©ter une fiche produit.

Voici les informations que tu dois retrouver dans le contenu fourni:

1. Nom de l'outil: Extrais le nom officiel de l'outil
2. Description d√©taill√©e: R√©dige une description compl√®te en fran√ßais (environ 200-300 mots) expliquant ce que fait l'outil, ses fonctionnalit√©s principales, et comment il utilise l'IA pour la vid√©o
3. Type de prix ("FREE", "FREEMIUM", "PAID", "CONTACT"): D√©termine le mod√®le de tarification
4. D√©tails de prix: Si disponible, extrais les informations d√©taill√©es sur les diff√©rents plans (en fran√ßais)
5. Fonctionnalit√©s: Liste les 3 √† 8 fonctionnalit√©s principales de l'outil au format texte simple, s√©par√©es par des points-virgules (;)
6. Liens sociaux: Trouve les liens vers Twitter/X, Instagram, Facebook, LinkedIn et GitHub si pr√©sents

IMPORTANT - Cat√©gorisation:
Tu dois √©galement analyser et proposer la meilleure cat√©gorisation pour cet outil.

Cat√©gories actuellement s√©lectionn√©es: ${selectedCategoriesInfo.length > 0 ? selectedCategoriesInfo.join(', ') : 'Aucune'}
Liste de toutes les cat√©gories disponibles: ${allCategoriesNames.join(', ')}

Tags actuellement s√©lectionn√©s: ${selectedTagsInfo.length > 0 ? selectedTagsInfo.join(', ') : 'Aucun'}
Liste de tous les tags disponibles: ${allTagsNames.join(', ')}

Cas d'usage actuellement s√©lectionn√©s: ${selectedUseCasesInfo.length > 0 ? selectedUseCasesInfo.join(', ') : 'Aucun'}
Liste de tous les cas d'usage disponibles: ${allUseCasesNames.join(', ')}

R√©ponds en format JSON structur√© comme suit:
{
  "name": "Nom de l'outil",
  "description": "Description d√©taill√©e en fran√ßais...",
  "pricingType": "FREE/FREEMIUM/PAID/CONTACT",
  "pricingDetails": "D√©tails des prix en fran√ßais...",
  "features": "Fonctionnalit√© 1; Fonctionnalit√© 2; Fonctionnalit√© 3",
  "twitterUrl": "url ou vide",
  "instagramUrl": "url ou vide",
  "facebookUrl": "url ou vide",
  "linkedinUrl": "url ou vide",
  "githubUrl": "url ou vide",
  "recommendedCategories": ["nom de la cat√©gorie 1", "nom de la cat√©gorie 2"],
  "recommendedTags": ["nom du tag 1", "nom du tag 2", "nom du tag 3"],
  "recommendedUseCases": ["nom du cas d'usage 1", "nom du cas d'usage 2"]
}

Voici le contenu du site web √† analyser:${socialLinksSection}

${content}
      `;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur Gemini API: ${response.statusText}`);
      }

      addProcessLog("‚úÖ R√©ponse re√ßue de Gemini AI");
      const aiResponse = await response.json();
      
      // Extraire le JSON de la r√©ponse de Gemini
      const responseText = aiResponse.candidates[0].content.parts[0].text;
      let jsonMatch = responseText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        addProcessLog("üîç Analyse des donn√©es extraites par l'IA...");
        const enrichedData = JSON.parse(jsonMatch[0]);
        
        // Mettre √† jour le formulaire avec les donn√©es enrichies
        setFormData((prev) => ({
          ...prev,
          name: enrichedData.name || prev.name,
          description: enrichedData.description || prev.description,
          pricingType: enrichedData.pricingType || prev.pricingType,
          pricingDetails: enrichedData.pricingDetails || prev.pricingDetails,
          features: enrichedData.features || prev.features,
          twitterUrl: enrichedData.twitterUrl || prev.twitterUrl,
          instagramUrl: enrichedData.instagramUrl || prev.instagramUrl,
          facebookUrl: enrichedData.facebookUrl || prev.facebookUrl,
          linkedinUrl: enrichedData.linkedinUrl || prev.linkedinUrl,
          githubUrl: enrichedData.githubUrl || prev.githubUrl,
        }));
        
        addProcessLog("‚úÖ Donn√©es de base mises √† jour");
        
        // Mise √† jour des cat√©gories recommand√©es
        if (enrichedData.recommendedCategories && Array.isArray(enrichedData.recommendedCategories)) {
          const recommendedCategoryIds: string[] = [];
          
          addProcessLog(`ü§ñ L'IA recommande les cat√©gories : ${enrichedData.recommendedCategories.join(', ')}`);
          
          enrichedData.recommendedCategories.forEach((categoryName: string) => {
            const category = categories.find(c => 
              c.name.toLowerCase() === categoryName.toLowerCase() ||
              c.name.toLowerCase().includes(categoryName.toLowerCase()) ||
              categoryName.toLowerCase().includes(c.name.toLowerCase())
            );
            
            if (category) {
              recommendedCategoryIds.push(category.id);
              addProcessLog(`  ‚úì Correspondance trouv√©e : "${categoryName}" ‚Üí "${category.name}"`);
            } else {
              addProcessLog(`  ‚úó Aucune correspondance trouv√©e pour la cat√©gorie "${categoryName}"`);
            }
          });
          
          if (recommendedCategoryIds.length > 0) {
            setFormData(prev => ({
              ...prev,
              selectedCategories: [...new Set([...prev.selectedCategories, ...recommendedCategoryIds])]
            }));
            
            toast.success(`${recommendedCategoryIds.length} cat√©gorie(s) mise(s) √† jour selon l'analyse AI`);
          }
        }
        
        // Mise √† jour des tags recommand√©s
        if (enrichedData.recommendedTags && Array.isArray(enrichedData.recommendedTags)) {
          const recommendedTagIds: string[] = [];
          
          addProcessLog(`ü§ñ L'IA recommande les tags : ${enrichedData.recommendedTags.join(', ')}`);
          
          enrichedData.recommendedTags.forEach((tagName: string) => {
            const tag = tags.find(t => 
              t.name.toLowerCase() === tagName.toLowerCase() ||
              t.name.toLowerCase().includes(tagName.toLowerCase()) ||
              tagName.toLowerCase().includes(t.name.toLowerCase())
            );
            
            if (tag) {
              recommendedTagIds.push(tag.id);
              addProcessLog(`  ‚úì Correspondance trouv√©e : "${tagName}" ‚Üí "${tag.name}"`);
            } else {
              addProcessLog(`  ‚úó Aucune correspondance trouv√©e pour le tag "${tagName}"`);
            }
          });
          
          if (recommendedTagIds.length > 0) {
            setFormData(prev => ({
              ...prev,
              selectedTags: [...new Set([...prev.selectedTags, ...recommendedTagIds])]
            }));
            
            toast.success(`${recommendedTagIds.length} tag(s) mis √† jour selon l'analyse AI`);
          }
        }
        
        // Mise √† jour des cas d'usage recommand√©s
        if (enrichedData.recommendedUseCases && Array.isArray(enrichedData.recommendedUseCases)) {
          const recommendedUseCaseIds: string[] = [];
          
          addProcessLog(`ü§ñ L'IA recommande les cas d'usage : ${enrichedData.recommendedUseCases.join(', ')}`);
          
          enrichedData.recommendedUseCases.forEach((useCaseName: string) => {
            const useCase = useCases.find(uc => 
              uc.name.toLowerCase() === useCaseName.toLowerCase() ||
              uc.name.toLowerCase().includes(useCaseName.toLowerCase()) ||
              useCaseName.toLowerCase().includes(uc.name.toLowerCase())
            );
            
            if (useCase) {
              recommendedUseCaseIds.push(useCase.id);
              addProcessLog(`  ‚úì Correspondance trouv√©e : "${useCaseName}" ‚Üí "${useCase.name}"`);
            } else {
              addProcessLog(`  ‚úó Aucune correspondance trouv√©e pour le cas d'usage "${useCaseName}"`);
            }
          });
          
          if (recommendedUseCaseIds.length > 0) {
            setFormData(prev => ({
              ...prev,
              selectedUseCases: [...new Set([...prev.selectedUseCases, ...recommendedUseCaseIds])]
            }));
            
            toast.success(`${recommendedUseCaseIds.length} cas d'usage mis √† jour selon l'analyse AI`);
          }
        }
        
        setCrawlStatus("Enrichissement termin√© avec succ√®s!");
        addProcessLog("‚úÖ Enrichissement termin√© avec succ√®s!");
        addProcessLog("üéâ Vous pouvez maintenant revoir et enregistrer les modifications");
        toast.success("Donn√©es enrichies avec succ√®s!");
        setActiveTab("form");
      } else {
        throw new Error("Impossible d'extraire les donn√©es JSON de la r√©ponse de l'IA");
      }
    } catch (error) {
      console.error("Erreur lors de l'enrichissement avec l'IA:", error);
      setCrawlStatus("√âchec de l'enrichissement: " + (error as Error).message);
      addProcessLog(`‚ùå √âchec de l'enrichissement: ${(error as Error).message}`);
      toast.error("√âchec de l'enrichissement avec l'IA");
    } finally {
      setIsEnriching(false);
    }
  };

  // Sauvegarder les modifications
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setIsLoading(true);
      
      const response = await fetch(`/api/tools/${tool.slug}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          categoryIds: formData.selectedCategories,
          tagIds: formData.selectedTags,
          useCaseIds: formData.selectedUseCases,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur lors de la mise √† jour: ${response.statusText}`);
      }

      toast.success("Outil mis √† jour avec succ√®s!");
      router.push("/admin/enrichir");
      router.refresh();
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'outil:", error);
      toast.error("√âchec de la mise √† jour: " + (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-8">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">Informations de l'outil</h2>
          <div className="flex space-x-2">
            <Button
              type="button"
              variant="outline"
              onClick={handleCrawlWebsite}
              disabled={isCrawling || !formData.websiteUrl || isEnriching}
              className="gap-2"
            >
              {isCrawling || isEnriching ? (
                <>
                  <Spinner size="sm" />
                  {isCrawling ? "Crawling en cours..." : "Analyse en cours..."}
                </>
              ) : (
                "Crawler & Enrichir"
              )}
            </Button>
            <Button 
              type="button" 
              variant="outline"
              onClick={() => setActiveTab(activeTab === "logs" ? "form" : "logs")}
            >
              {activeTab === "logs" ? "Voir le formulaire" : "Voir les logs"}
            </Button>
            <Button type="button" onClick={handleSubmit} disabled={isLoading}>
              {isLoading ? "Enregistrement..." : "Enregistrer"}
            </Button>
          </div>
        </div>

        {crawlStatus && (
          <div className="mb-6 p-4 border rounded-md bg-muted">
            <p className="font-medium">Statut: {crawlStatus}</p>
          </div>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="form">Formulaire</TabsTrigger>
            <TabsTrigger value="logs">Logs du processus</TabsTrigger>
          </TabsList>
          
          <TabsContent value="form">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div>
                  <Label htmlFor="name">Nom de l'outil</Label>
                  <Input
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    className="mt-1"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="websiteUrl">URL du site web</Label>
                  <Input
                    id="websiteUrl"
                    name="websiteUrl"
                    value={formData.websiteUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="logoUrl">URL du logo</Label>
                  <Input
                    id="logoUrl"
                    name="logoUrl"
                    value={formData.logoUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="pricingType">Type de tarification</Label>
                  <select
                    id="pricingType"
                    name="pricingType"
                    value={formData.pricingType}
                    onChange={(e) => setFormData((prev) => ({ ...prev, pricingType: e.target.value }))}
                    className="w-full h-9 rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors mt-1"
                  >
                    <option value="FREE">Gratuit</option>
                    <option value="FREEMIUM">Freemium</option>
                    <option value="PAID">Payant</option>
                    <option value="CONTACT">Sur devis</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    className="mt-1 min-h-[200px]"
                    required
                  />
                </div>

                <div className="md:col-span-2">
                  <Label htmlFor="features">Fonctionnalit√©s (s√©par√©es par ";")</Label>
                  <Textarea
                    id="features"
                    name="features"
                    value={formData.features}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="Fonction 1; Fonction 2; Fonction 3"
                  />
                </div>

                <div className="md:col-span-2">
                  <Label htmlFor="pricingDetails">D√©tails de tarification</Label>
                  <Textarea
                    id="pricingDetails"
                    name="pricingDetails"
                    value={formData.pricingDetails}
                    onChange={handleInputChange}
                    className="mt-1"
                  />
                </div>
              </div>

              <Separator className="my-6" />

              <h3 className="text-lg font-medium mb-4">R√©seaux Sociaux</h3>
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div>
                  <Label htmlFor="twitterUrl">Twitter/X</Label>
                  <Input
                    id="twitterUrl"
                    name="twitterUrl"
                    value={formData.twitterUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="https://twitter.com/..."
                  />
                </div>

                <div>
                  <Label htmlFor="instagramUrl">Instagram</Label>
                  <Input
                    id="instagramUrl"
                    name="instagramUrl"
                    value={formData.instagramUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="https://instagram.com/..."
                  />
                </div>

                <div>
                  <Label htmlFor="facebookUrl">Facebook</Label>
                  <Input
                    id="facebookUrl"
                    name="facebookUrl"
                    value={formData.facebookUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="https://facebook.com/..."
                  />
                </div>

                <div>
                  <Label htmlFor="linkedinUrl">LinkedIn</Label>
                  <Input
                    id="linkedinUrl"
                    name="linkedinUrl"
                    value={formData.linkedinUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="https://linkedin.com/company/..."
                  />
                </div>

                <div>
                  <Label htmlFor="githubUrl">GitHub</Label>
                  <Input
                    id="githubUrl"
                    name="githubUrl"
                    value={formData.githubUrl}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="https://github.com/..."
                  />
                </div>
              </div>
            </form>
          </TabsContent>
          
          <TabsContent value="logs">
            <ScrollArea className="h-[500px] border rounded-md p-4 bg-gray-50 dark:bg-gray-900">
              {processLogs.length === 0 ? (
                <div className="py-8 text-center text-muted-foreground">
                  Aucun log √† afficher. Lancez le crawling pour voir le processus en d√©tail.
                </div>
              ) : (
                <div className="space-y-1 font-mono text-sm">
                  {processLogs.map((log, index) => (
                    <div key={index} className="py-1">
                      {log}
                    </div>
                  ))}
                  <div ref={logsEndRef} />
                </div>
              )}
            </ScrollArea>
          </TabsContent>
        </Tabs>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h3 className="text-xl font-semibold mb-6">Cat√©gories, Tags et Cas d'Usage</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h4 className="font-medium mb-3">Cat√©gories</h4>
            <div className="space-y-2 max-h-80 overflow-y-auto p-2">
              {categories.map((category) => (
                <div key={category.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={`category-${category.id}`}
                    checked={formData.selectedCategories.includes(category.id)}
                    onCheckedChange={(checked) =>
                      handleCategoryChange(category.id, checked as boolean)
                    }
                  />
                  <Label
                    htmlFor={`category-${category.id}`}
                    className="cursor-pointer"
                  >
                    {category.name}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <div>
            <h4 className="font-medium mb-3">Tags</h4>
            <div className="space-y-2 max-h-80 overflow-y-auto p-2">
              {tags.map((tag) => (
                <div key={tag.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={`tag-${tag.id}`}
                    checked={formData.selectedTags.includes(tag.id)}
                    onCheckedChange={(checked) =>
                      handleTagChange(tag.id, checked as boolean)
                    }
                  />
                  <Label
                    htmlFor={`tag-${tag.id}`}
                    className="cursor-pointer"
                  >
                    {tag.name}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <div>
            <h4 className="font-medium mb-3">Cas d'usage</h4>
            <div className="space-y-2 max-h-80 overflow-y-auto p-2">
              {useCases.map((useCase) => (
                <div key={useCase.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={`useCase-${useCase.id}`}
                    checked={formData.selectedUseCases.includes(useCase.id)}
                    onCheckedChange={(checked) =>
                      handleUseCaseChange(useCase.id, checked as boolean)
                    }
                  />
                  <Label
                    htmlFor={`useCase-${useCase.id}`}
                    className="cursor-pointer"
                  >
                    {useCase.name}
                  </Label>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 