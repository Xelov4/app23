'use client';

import { useRouter } from 'next/navigation';
import { 
  Edit, 
  Trash2, 
  Eye,
  EyeOff,
  ImagePlus,
  Package
} from 'lucide-react';
import { format } from 'date-fns';
import Image from 'next/image';
import AdminTable from '@/components/admin/generics/AdminTable';
import { Product } from '@/types/app';
import { formatPrice } from '@/lib/utils';

export default function ProductsPage() {
  const router = useRouter();

  // Fonction pour récupérer les produits
  const fetchProducts = async (): Promise<Product[]> => {
    const response = await fetch('/api/products');
    if (!response.ok) {
      throw new Error(`Erreur: ${response.status}`);
    }
    return await response.json();
  };

  // Définition des colonnes du tableau
  const columns = [
    {
      header: 'Produit',
      accessorKey: 'name',
      enableSorting: true,
      renderCell: (product: Product) => (
        <div className="flex items-center">
          <div className="h-12 w-12 relative rounded-md overflow-hidden bg-gray-100 border">
            {product.images && product.images[0] ? (
              <Image
                src={product.images[0]}
                alt={product.name}
                className="object-cover object-center"
                fill
                sizes="48px"
              />
            ) : (
              <div className="flex items-center justify-center h-full w-full">
                <ImagePlus className="h-6 w-6 text-gray-400" />
              </div>
            )}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{product.name}</div>
            <div className="text-xs text-gray-500">SKU: {product.sku || 'N/A'}</div>
          </div>
        </div>
      )
    },
    {
      header: 'Catégorie',
      accessorKey: 'categoryId',
      renderCell: (product: Product) => (
        <div className="text-sm text-gray-700">
          {product.category?.name || 'Non classé'}
        </div>
      )
    },
    {
      header: 'Prix',
      accessorKey: 'price',
      enableSorting: true,
      renderCell: (product: Product) => (
        <div className="text-sm font-medium">
          {formatPrice(product.price)}
          {product.compareAtPrice && product.compareAtPrice > product.price && (
            <span className="ml-2 line-through text-gray-500 text-xs">
              {formatPrice(product.compareAtPrice)}
            </span>
          )}
        </div>
      )
    },
    {
      header: 'Stock',
      accessorKey: 'inventory',
      enableSorting: true,
      renderCell: (product: Product) => (
        <div className={`text-sm font-medium ${
          product.inventory <= 0 ? 'text-red-600' : 
          product.inventory < 10 ? 'text-amber-600' : 'text-green-600'
        }`}>
          {product.inventory !== undefined ? product.inventory : 'N/A'}
        </div>
      )
    },
    {
      header: 'Statut',
      accessorKey: 'isActive',
      renderCell: (product: Product) => (
        <span className={`px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
          product.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {product.isActive ? 'Actif' : 'Inactif'}
        </span>
      )
    },
    {
      header: 'Mise à jour',
      accessorKey: 'updatedAt',
      enableSorting: true,
      renderCell: (product: Product) => (
        <div className="text-sm text-gray-500">
          {format(new Date(product.updatedAt), 'dd/MM/yyyy')}
        </div>
      )
    }
  ];

  // Définition des actions
  const actions = [
    {
      label: 'Voir produit',
      icon: <Eye className="w-4 h-4 mr-1" />,
      onClick: (product: Product) => router.push(`/products/${product.id}`),
      variant: 'outline' as const
    },
    {
      label: 'Éditer',
      icon: <Edit className="w-4 h-4 mr-1" />,
      onClick: (product: Product) => router.push(`/admin/products/${product.id}/edit`),
      variant: 'outline' as const
    },
    {
      label: 'Désactiver',
      icon: <EyeOff className="w-4 h-4 mr-1" />,
      onClick: async (product: Product) => {
        if (confirm(`Voulez-vous désactiver le produit "${product.name}" ?`)) {
          await fetch(`/api/products/${product.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isActive: false })
          });
          window.location.reload();
        }
      },
      variant: 'outline' as const,
      condition: (product: Product) => product.isActive
    },
    {
      label: 'Activer',
      icon: <Eye className="w-4 h-4 mr-1" />,
      onClick: async (product: Product) => {
        if (confirm(`Voulez-vous activer le produit "${product.name}" ?`)) {
          await fetch(`/api/products/${product.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isActive: true })
          });
          window.location.reload();
        }
      },
      variant: 'outline' as const,
      condition: (product: Product) => !product.isActive
    },
    {
      label: 'Supprimer',
      icon: <Trash2 className="w-4 h-4 mr-1" />,
      onClick: async (product: Product) => {
        if (confirm(`Êtes-vous sûr de vouloir supprimer définitivement le produit "${product.name}" ? Cette action est irréversible.`)) {
          await fetch(`/api/products/${product.id}`, { method: 'DELETE' });
          window.location.reload();
        }
      },
      variant: 'destructive' as const
    }
  ];

  // Statistiques
  const createStatCards = (products: Product[]) => [
    {
      title: "Nombre de produits",
      value: products.length,
      color: 'blue'
    },
    {
      title: "Produits actifs",
      value: products.filter(p => p.isActive).length,
      color: 'green'
    },
    {
      title: "Produits inactifs",
      value: products.filter(p => !p.isActive).length,
      color: 'gray'
    },
    {
      title: "Produits en rupture",
      value: products.filter(p => p.inventory <= 0).length,
      color: 'red'
    }
  ];

  return (
    <AdminTable<Product>
      title="Tous les produits"
      icon={<Package className="mr-2 h-6 w-6 text-primary" />}
      description="Gérez votre catalogue de produits"
      fetchItems={fetchProducts}
      columns={columns}
      actions={actions}
      searchFields={['name', 'sku', 'description']}
      statCards={createStatCards}
      itemsPerPage={20}
      createButtonText="Ajouter un produit"
      onCreateClick={() => router.push('/admin/products/create')}
    />
  );
} 