const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Types d'enum pour le prix
const PricingType = {
  FREE: "FREE",
  FREEMIUM: "FREEMIUM",
  PAID: "PAID",
  CONTACT: "CONTACT"
};

// Donn√©es de base pour g√©n√©rer les outils
const aiNames = ["AI", "Vision", "Creator", "Gen", "Neural", "Deep", "Smart", "Synth", "Auto", "Flux", "Pro", "Nova", "Max", "Ultra", "Intelligent", "Cognitive", "Logic", "System", "Assistant", "Genius", "Expert", "Master", "Craft", "Canvas", "Workshop", "Lab", "Studio", "Factory", "Forge", "Architect", "Builder", "Creator", "Designer", "Developer", "Engineer", "Maker", "Producer"];
const domains = ["Image", "Video", "Audio", "Media", "Pic", "Frame", "Sound", "Voice", "Motion", "Visual", "Scene", "Studio", "Production", "Director", "Editor", "Mixer", "Enhancer", "Filter", "Effect", "Transform", "Render", "Compose", "Create", "Generate", "Stream", "Process", "Analyze", "Optimize", "Model", "Design", "Animation", "Graphics", "Content", "Art"];
const features = [
  "Haute r√©solution", "Export multi-format", "√âdition par lot", "Interface intuitive", "Partage facilit√©", 
  "Intelligence contextuelle", "Styles personnalisables", "Traitement rapide", "Mode hors-ligne", 
  "Reconnaissance d'objets", "Effets temps r√©el", "Analyse s√©mantique", "Int√©gration cloud", 
  "Correction automatique", "Filtres avanc√©s", "Mod√®les pr√©-entra√Æn√©s", "API disponible", 
  "Retouche intelligente", "Conversion de formats", "Collaboration en temps r√©el",
  "G√©n√©ration d'images", "Montage vid√©o", "Traitement audio", "Animation automatique",
  "Suppression de bruit", "Reconnaissance vocale", "Sous-titrage automatique",
  "Synth√®se vocale", "Effets sp√©ciaux", "Stabilisation vid√©o", "Correction colorim√©trique",
  "Masking intelligent", "Tracking d'objets", "Restoration d'image", "Upscaling vid√©o"
];
const pricingDetails = [
  "Gratuit pour usage personnel",
  "√Ä partir de 9,99$/mois",
  "Freemium avec fonctionnalit√©s avanc√©es payantes",
  "Offre d'essai gratuite de 14 jours",
  "Version Pro √† 19,99$/mois",
  "Contacter l'√©quipe pour un devis personnalis√©",
  "Tarification bas√©e sur l'usage",
  "Plan entreprise disponible",
  "5$/mois pour les utilisateurs r√©guliers",
  "Version gratuite limit√©e, Pro √† 29$/mois",
  "Tarification flexible selon les besoins",
  "Gratuit pour les √©tudiants, 15$/mois pour les professionnels"
];

// Cat√©gories pr√©d√©finies
const categories = [
  { name: "G√©n√©ration d'images", slug: "generation-images", description: "Outils IA pour cr√©er des images √† partir de descriptions textuelles" },
  { name: "√âdition vid√©o", slug: "edition-video", description: "Outils IA pour √©diter et am√©liorer des vid√©os" },
  { name: "Montage automatique", slug: "montage-automatique", description: "Outils IA pour automatiser le montage vid√©o" },
  { name: "Traitement audio", slug: "traitement-audio", description: "Outils IA pour analyser et manipuler l'audio" },
  { name: "Animation", slug: "animation", description: "Outils IA pour cr√©er des animations" },
  { name: "Effets sp√©ciaux", slug: "effets-speciaux", description: "Outils IA pour ajouter des effets sp√©ciaux aux m√©dias" },
  { name: "Transcription", slug: "transcription", description: "Outils IA pour transcrire l'audio en texte" },
  { name: "Sous-titrage", slug: "sous-titrage", description: "Outils IA pour g√©n√©rer des sous-titres" },
  { name: "Voix off", slug: "voix-off", description: "Outils IA pour cr√©er des voix synth√©tiques" },
  { name: "Marketing vid√©o", slug: "marketing-video", description: "Outils IA pour optimiser le marketing vid√©o" },
];

// Tags pr√©d√©finis
const tags = [
  { name: "Gratuit", slug: "gratuit" },
  { name: "D√©butant", slug: "debutant" },
  { name: "Professionnel", slug: "professionnel" },
  { name: "Temps R√©el", slug: "temps-reel" },
  { name: "YouTube", slug: "youtube" },
  { name: "TikTok", slug: "tiktok" },
  { name: "Instagram", slug: "instagram" },
  { name: "Cin√©ma", slug: "cinema" },
  { name: "Animation 3D", slug: "animation-3d" },
  { name: "Motion Design", slug: "motion-design" },
  { name: "Open Source", slug: "open-source" },
  { name: "IA G√©n√©rative", slug: "ia-generative" }
];

// Types d'utilisateurs pr√©d√©finis
const userTypes = [
  { name: "Cr√©ateurs de Contenu", slug: "createurs-de-contenu" },
  { name: "YouTubers", slug: "youtubers" },
  { name: "Monteurs Vid√©o", slug: "monteurs-video" },
  { name: "R√©alisateurs", slug: "realisateurs" },
  { name: "Streamers", slug: "streamers" },
  { name: "Motion Designers", slug: "motion-designers" },
  { name: "Animateurs", slug: "animateurs" },
  { name: "Entreprises", slug: "entreprises" },
  { name: "Marketeurs", slug: "marketeurs" },
  { name: "√âtudiants", slug: "etudiants" }
];

// G√©n√©rer une description bas√©e sur la cat√©gorie
function generateDescription(categoryIndex) {
  const descriptions = [
    "Solution IA pour g√©n√©rer des images de haute qualit√© √† partir de descriptions textuelles",
    "Plateforme d'√©dition vid√©o assist√©e par IA offrant des fonctionnalit√©s avanc√©es pour cr√©ateurs",
    "Outil de montage vid√©o automatis√© permettant de cr√©er des vid√©os professionnelles rapidement",
    "Solution IA pour nettoyer, am√©liorer et transformer vos fichiers audio avec une qualit√© professionnelle",
    "Plateforme d'animation IA permettant de cr√©er et animer des personnages et des sc√®nes facilement",
    "Suite d'outils pour ajouter des effets sp√©ciaux impressionnants √† vos vid√©os gr√¢ce √† l'IA",
    "Logiciel de transcription audio aliment√© par l'IA offrant une pr√©cision remarquable",
    "Outil de g√©n√©ration automatique de sous-titres pr√©cis pour vos vid√©os",
    "Technologie de synth√®se vocale pour cr√©er des voix off de qualit√© professionnelle",
    "Suite d'outils IA pour optimiser vos vid√©os marketing et maximiser leur impact"
  ];
  return descriptions[categoryIndex % descriptions.length];
}

// Fonction utilitaire pour attendre X millisecondes
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Nombre total d'outils √† g√©n√©rer
const TOTAL_TOOLS = 1885;

async function main() {
  console.log(`üå± D√©but du processus de seed pour g√©n√©rer ${TOTAL_TOOLS} outils...`);
  
  // Cr√©er un utilisateur admin
  console.log("üë§ Cr√©ation de l'utilisateur admin...");
  const hashedPassword = await bcrypt.hash('admin123', 10);
  await prisma.user.upsert({
    where: { email: 'admin@example.com' },
    update: {},
    create: {
      email: 'admin@example.com',
      name: 'Admin',
      password: hashedPassword,
      role: 'ADMIN'
    },
  });
  
  // Cr√©er les cat√©gories
  console.log('üìÇ Cr√©ation des cat√©gories...');
  const createdCategories = await Promise.all(
    categories.map(async (category) => {
      return prisma.category.upsert({
        where: { slug: category.slug },
        update: {},
        create: {
          name: category.name,
          slug: category.slug,
          description: category.description,
          createdAt: new Date(),
          updatedAt: new Date()
        },
      });
    })
  );
  
  // Cr√©er les tags
  console.log('üè∑Ô∏è Cr√©ation des tags...');
  const createdTags = await Promise.all(
    tags.map(async (tag) => {
      return prisma.tag.upsert({
        where: { slug: tag.slug },
        update: {},
        create: {
          name: tag.name,
          slug: tag.slug,
          createdAt: new Date(),
          updatedAt: new Date()
        },
      });
    })
  );
  
  // Cr√©er les types d'utilisateurs
  console.log("üë• Cr√©ation des types d'utilisateurs...");
  const createdUserTypes = await Promise.all(
    userTypes.map(async (userType) => {
      return prisma.userType.upsert({
        where: { slug: userType.slug },
        update: {},
        create: {
          name: userType.name,
          slug: userType.slug,
          description: `Pour les ${userType.name.toLowerCase()}`,
          createdAt: new Date(),
          updatedAt: new Date()
        },
      });
    })
  );
  
  // Cr√©er les fonctionnalit√©s
  console.log('üîß Cr√©ation des fonctionnalit√©s...');
  const createdFeatures = await Promise.all(
    features.map(async (feature, index) => {
      const slug = feature.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '');
      return prisma.feature.upsert({
        where: { slug },
        update: {},
        create: {
          name: feature,
          slug,
          description: `Fonctionnalit√© permettant ${feature.toLowerCase()}`,
          createdAt: new Date(),
          updatedAt: new Date()
        },
      });
    })
  );
  
  // G√©n√©ration des 1885 outils en batch
  console.log(`üõ†Ô∏è G√©n√©ration de ${TOTAL_TOOLS} outils...`);
  
  // G√©n√©ration par lots pour √©viter de saturer la m√©moire et les timeouts
  const BATCH_SIZE = 25; // R√©duit de 100 √† 25
  const batches = Math.ceil(TOTAL_TOOLS / BATCH_SIZE);
  
  for (let batch = 0; batch < batches; batch++) {
    const startIndex = batch * BATCH_SIZE;
    const endIndex = Math.min(startIndex + BATCH_SIZE, TOTAL_TOOLS);
    console.log(`üíæ Traitement du lot ${batch + 1}/${batches} (outils ${startIndex + 1} √† ${endIndex})...`);
    
    const toolsPromises = [];
    
    for (let i = startIndex; i < endIndex; i++) {
      // G√©n√©rer un nom unique pour chaque outil
      const nameIndex1 = i % aiNames.length;
      const nameIndex2 = Math.floor(i / aiNames.length) % domains.length;
      const name = `${aiNames[nameIndex1]} ${domains[nameIndex2]} ${Math.floor(i / (aiNames.length * domains.length))}`;
      const slug = name.toLowerCase().replace(/\s+/g, '-');
      
      // Choisir une cat√©gorie, un type de prix et des d√©tails de prix
      const categoryIndex = i % categories.length;
      const pricingTypeIndex = i % 3; // Distribuer √©quitablement entre FREE, FREEMIUM, PAID
      const pricingType = Object.values(PricingType)[pricingTypeIndex];
      const pricingDetail = pricingDetails[i % pricingDetails.length];
      
      // G√©n√©rer une description bas√©e sur la cat√©gorie
      const description = generateDescription(categoryIndex);
      
      // Cr√©er l'outil
      const toolPromise = prisma.tool.upsert({
        where: { slug },
        update: {},
        create: {
          name,
          slug,
          description,
          logoUrl: `/images/tools/generated-${i % 20 + 1}.png`,
          websiteUrl: `https://www.${slug}.ai`,
          features: `${features[i % 10]}, ${features[(i + 5) % features.length]}, ${features[(i + 10) % features.length]}`,
          pricingType,
          pricingDetails: pricingDetail,
          isActive: true,
          hasAffiliateProgram: i % 5 === 0, // 20% ont un programme d'affiliation
          createdAt: new Date(Date.now() - Math.random() * 10000000000),
          updatedAt: new Date()
        },
      }).then(async (tool) => {
        // Ajouter des relations avec les cat√©gories (1-2 cat√©gories par outil)
        const categoryCount = (i % 2) + 1;
        const categoryPromises = [];
        for (let j = 0; j < categoryCount; j++) {
          const categoryIndex = (i + j) % createdCategories.length;
          categoryPromises.push(
            prisma.categoriesOnTools.upsert({
              where: {
                toolId_categoryId: {
                  toolId: tool.id,
                  categoryId: createdCategories[categoryIndex].id
                }
              },
              update: {},
              create: {
                toolId: tool.id,
                categoryId: createdCategories[categoryIndex].id
              }
            })
          );
        }
        
        // Ajouter des relations avec les tags (2-4 tags par outil)
        const tagCount = (i % 3) + 2;
        const tagPromises = [];
        for (let j = 0; j < tagCount; j++) {
          const tagIndex = (i + j) % createdTags.length;
          tagPromises.push(
            prisma.tagsOnTools.upsert({
              where: {
                toolId_tagId: {
                  toolId: tool.id,
                  tagId: createdTags[tagIndex].id
                }
              },
              update: {},
              create: {
                toolId: tool.id,
                tagId: createdTags[tagIndex].id
              }
            })
          );
        }
        
        // Ajouter des relations avec les fonctionnalit√©s (2-4 fonctionnalit√©s par outil)
        const featureCount = (i % 3) + 2;
        const featurePromises = [];
        for (let j = 0; j < featureCount; j++) {
          const featureIndex = (i + j) % createdFeatures.length;
          featurePromises.push(
            prisma.featuresOnTools.upsert({
              where: {
                toolId_featureId: {
                  toolId: tool.id,
                  featureId: createdFeatures[featureIndex].id
                }
              },
              update: {},
              create: {
                toolId: tool.id,
                featureId: createdFeatures[featureIndex].id
              }
            })
          );
        }
        
        // Ajouter des relations avec les types d'utilisateurs (1-2 types par outil)
        const userTypeCount = (i % 2) + 1;
        const userTypePromises = [];
        for (let j = 0; j < userTypeCount; j++) {
          const userTypeIndex = (i + j) % createdUserTypes.length;
          userTypePromises.push(
            prisma.userTypesOnTools.upsert({
              where: {
                toolId_userTypeId: {
                  toolId: tool.id,
                  userTypeId: createdUserTypes[userTypeIndex].id
                }
              },
              update: {},
              create: {
                toolId: tool.id,
                userTypeId: createdUserTypes[userTypeIndex].id
              }
            })
          );
        }
        
        // Ajouter quelques avis pour 20% des outils
        const reviewPromises = [];
        if (i % 5 === 0) {
          const reviewCount = (i % 3) + 1;
          for (let j = 0; j < reviewCount; j++) {
            reviewPromises.push(
              prisma.review.upsert({
                where: { id: `review-${i}-${j}` },
                update: {},
                create: {
                  id: `review-${i}-${j}`,
                  title: `Avis sur ${name}`,
                  content: `C'est un excellent outil pour ${description.toLowerCase()}.`,
                  rating: 3.5 + (j % 2),
                  userEmail: `user${i % 100}@example.com`,
                  userName: `Utilisateur ${i % 100}`,
                  toolId: tool.id,
                  createdAt: new Date(Date.now() - Math.random() * 5000000000),
                  updatedAt: new Date()
                }
              })
            );
          }
        }
        
        // Ex√©cuter toutes les promesses de relations en parall√®le
        await Promise.all([
          ...categoryPromises,
          ...tagPromises,
          ...featurePromises,
          ...userTypePromises,
          ...reviewPromises
        ]);
        
        return tool;
      });
      
      toolsPromises.push(toolPromise);
    }
    
    // Attendre la fin de toutes les op√©rations du lot
    await Promise.all(toolsPromises);
    
    // Ajouter un d√©lai entre les lots pour √©viter de surcharger la BD
    if (batch < batches - 1) {
      console.log(`‚è±Ô∏è Pause de 2 secondes avant le lot suivant...`);
      await sleep(2000);
    }
  }
  
  console.log(`‚úÖ Base de donn√©es remplie avec succ√®s avec ${TOTAL_TOOLS} outils!`);
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 